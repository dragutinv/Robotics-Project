/*
 * Copyright (c) 2014, Project: Rathlin, Heriot-Watt University, Edinburgh, UK
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the Heriot-Watt University nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
  
// Author: Deepayan Bhowmik <d.bhowmik@hw.ac.uk> 
 				 

package colormodel;
import std.header.Parameter.*;

actor computeDisplacement() int weights, int kDerArray ==> int dx, int dy:
	int count_x := 0;
	int count_y := 0;
	
	/* Get the weights & the kernel values*/
	int weightBuffer[X_SIZE][Y_SIZE];
	int kDerArrayBuffer[X_SIZE][Y_SIZE];
	getWeightsArray: action weights:[weight_val] ==>
	do
		weightBuffer[count_x][count_y] := weight_val;
		
		
		count_y := count_y + 1;
		
		if(count_y = Y_SIZE) then
			count_x := count_x + 1;
			count_y := 0;
		end								
	end
	
	/* Get the kernel values */	
	getkderArray: action kDerArray:[der_arrayVal] ==>
	do
		kDerArrayBuffer[count_x][count_y] := der_arrayVal;
		count_y := count_y + 1;
		
		if(count_y = Y_SIZE) then
			count_y := 0;
			count_x := count_x + 1;
		end						
	end
	    
		
    doneArrayCount_kDer: action ==>
    guard count_x = X_SIZE
    do	
    	count_y := 0;
    	count_x := 0;          	    	  	    	
    end
    
    doneArrayCount: action ==>
    guard count_x = X_SIZE
    do	
    	count_y := 0;
    	count_x := 0;      		    	     	    	
    end


	int dx_val;
	int dy_val;
	compute_displacement: action ==> dx:[dx_val], dy:[dy_val]
	var int curPixelWeight,
		int weight_sum,
		int x_sum,
		int y_sum 	
    do	    	   
    	weight_sum := 0;
    	x_sum := 0;
    	y_sum := 0;
    	 	   
    	foreach int x in -HALF_X .. (HALF_X-1) do
    		foreach int y in -HALF_Y .. (HALF_Y-1) do
    			curPixelWeight := weightBuffer[x+HALF_X+1][y+HALF_Y+1] * kDerArrayBuffer[x+HALF_X+1][y+HALF_Y+1];
    			weight_sum := weight_sum + curPixelWeight;
    			
    			x_sum := x_sum + x*curPixelWeight;
    			y_sum := y_sum + y*curPixelWeight;
    			    					     			
    		end
    	end    	    	    
    	    	
    	/* dx */  	 	    	   
    	dx_val := x_sum / weight_sum;    	    	
    	
    	/* dy */
    	dy_val := y_sum / weight_sum;			    	    
    end

	schedule fsm s0 :	
		s0 (getkderArray) --> s0;
		s0 (doneArrayCount_kDer) --> s1;
   		s1 (getWeightsArray ) --> s1;
   		s1 (doneArrayCount) --> s2;
   		s2 (compute_displacement) --> s1; 					
	end
	
	priority		
		doneArrayCount_kDer > getkderArray;
		doneArrayCount > getWeightsArray;		
	end
end